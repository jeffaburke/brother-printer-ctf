---
# Brother Printer CTF Portal Deployment
# This playbook deploys a vulnerable Brother printer web interface for CTF purposes
- name: Deploy Brother Printer CTF Portal
  hosts: all
  become: yes
  
  # Configuration variables
  vars:
    app_name: "brother-printer-ctf"
    app_user: "www-data"
    app_dir: "/var/www/{{ app_name }}"
    git_repo: "https://github.com/jeffaburke/brother-printer-ctf.git"
    
  tasks:
    # Update package cache to ensure latest package information
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    # Install core system packages
    - name: Install system packages
      apt:
        name:
          - python3                    # Python runtime
          - python3-pip               # Python package manager
          - python3-venv              # Python virtual environments
          - python3-dev               # Python development headers
          - apache2                   # Web server
          - libapache2-mod-wsgi-py3   # Apache WSGI module for Python
          - git                       # Version control
          - ufw                       # Firewall
          - cups                      # Print server (includes all CUPS components)
          - printer-driver-all        # Additional printer drivers
          - cups-pdf                  # Virtual PDF printer
        state: present

    # Start CUPS print server
    - name: Enable and start CUPS service
      systemd:
        name: cups
        state: started
        enabled: yes

    # Configure Apache web server
    - name: Enable Apache modules
      apache2_module:
        name: "{{ item }}"
        state: present
      loop:
        - rewrite    # URL rewriting for clean URLs
        - wsgi       # Python WSGI support (auto-installed with apache2)
        - headers    # HTTP header manipulation

    # Application deployment
    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Configure git for safe directory access
      git_config:
        name: "safe.directory"
        value: "{{ app_dir }}"

    - name: Clone application repository
      git:
        repo: "{{ git_repo }}"
        dest: "{{ app_dir }}"
        version: rce
        force: yes

    # Python environment setup
    - name: Verify requirements.txt exists
      stat:
        path: "{{ app_dir }}/requirements.txt"
      register: requirements_file

    - name: Fail if requirements.txt not found
      fail:
        msg: "requirements.txt not found in repository at {{ app_dir }}"
      when: not requirements_file.stat.exists

    - name: Create Python virtual environment
      command: "python3 -m venv {{ app_dir }}/venv"
      args:
        creates: "{{ app_dir }}/venv"

    - name: Install Python dependencies
      pip:
        requirements: "{{ app_dir }}/requirements.txt"
        virtualenv: "{{ app_dir }}/venv"
        virtualenv_python: python3

    # Apache configuration
    - name: Copy WSGI entry point
      copy:
        src: "{{ app_dir }}/wsgi-entry.py"
        dest: "{{ app_dir }}/{{ app_name }}.wsgi"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
        remote_src: yes

    - name: Copy Apache site configuration
      copy:
        src: "{{ app_dir }}/apache-config.conf"
        dest: "/etc/apache2/sites-available/{{ app_name }}.conf"
        owner: root
        group: root
        mode: '0644'
        remote_src: yes

    - name: Enable new Apache site
      command: a2ensite {{ app_name }}.conf
      args:
        creates: "/etc/apache2/sites-enabled/{{ app_name }}.conf"

    - name: Disable default Apache site
      command: a2dissite 000-default.conf
      args:
        removes: "/etc/apache2/sites-enabled/000-default.conf"

    - name: Restart and enable Apache
      systemd:
        name: apache2
        state: restarted
        enabled: yes

    # Firewall configuration
    - name: Enable UFW firewall
      ufw:
        state: enabled
        policy: deny

    - name: Allow SSH access
      ufw:
        rule: allow
        port: "22"
        proto: tcp

    - name: Allow HTTP access
      ufw:
        rule: allow
        port: "80"
        proto: tcp

    # Final configuration
    - name: Set application directory ownership
      file:
        path: "{{ app_dir }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        recurse: yes

    - name: Validate Apache configuration
      command: apache2ctl configtest
      register: apache_config_test
      changed_when: false
      failed_when: apache_config_test.rc != 0

    - name: Wait for Apache to be ready
      wait_for:
        port: 80
        timeout: 30

    # Deployment completion
    - name: Display deployment information
      debug:
        msg: |
          Brother Printer CTF Portal has been deployed!
          Access URL: http://{{ ansible_default_ipv4.address }}
          Application Directory: {{ app_dir }}
          Default Credentials: 1234567 / 1234567
          
          The application is ready to use!
